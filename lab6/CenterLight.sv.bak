module CenterLight(clk, reset, in, out);
	input logic 		clk, reset;
	input logic [3:0] in;
	output logic 		out;
	
	typedef enum logic {A, B} state;
	state ps, ns;
	
	always_comb begin
		case (ps)
			A: if ((in == 4'b0100) | (in == 4'b1000))	ns = B;
				else												ns = A;
			B: if ((in == 4'b0110) | (in == 4'b1001)) ns = A;
				else												ns = B;
		endcase
	end
	
	assign out = (ns == A);
	
	always_ff @(posedge clk) begin
		if (reset)
			ps <= A;
		else
			ps <= ns;
	end
	
endmodule

module CenterLight_testbench();

	logic 		clk, reset;
	logic [3:0] in;
	logic 		out;
	
	CenterLight dut(clk, reset, in, out);
	
	parameter CLOCK_PERIOD=100;
	initial begin
		clk <= 0;
		forever #(CLOCK_PERIOD/2) clk <= ~clk;
	end
	
	initial begin										@posedge clk;
			reset <= 1;									@posedge clk;
			reset <= 0; in <= 4'b0000;				@posedge clk;
															@posedge clk;
															@posedge clk;
			in <= 4'b0100;								@posedge clk;
															@posedge clk;
															@posedge clk;
			in <= 4'b0001;								@posedge clk;
															@posedge clk;
															@posedge clk;
			in <= 4'b0101;								@posedge clk;
															@posedge clk;
															@posedge clk;
			in <= 4'b0000;								@posedge clk;
															@posedge clk;
															@posedge clk;
			in <= 4'b1000;								@posedge clk;
															@posedge clk;
															@posedge clk;
			in <= 4'b0001;								@posedge clk;
															@posedge clk;
															@posedge clk;
			in <= 4'b1001;								@posedge clk;
															@posedge clk;
															@posedge clk;
			in <= 4'b0000;								@posedge clk;
															@posedge clk;
															@posedge clk;
			in <= 4'b1000;								@posedge clk;
															@posedge clk;
															@posedge clk;
			in <= 4'b0010;								@posedge clk;
															@posedge clk;
															@posedge clk;
			in <= 4'b1010;								@posedge clk;
															@posedge clk;
															@posedge clk;
			in <= 4'b0000;								@posedge clk;
															@posedge clk;
															@posedge clk;
			in <= 4'b0100;								@posedge clk;
															@posedge clk;
															@posedge clk;
			in <= 4'b0010;								@posedge clk;
															@posedge clk;
															@posedge clk;
			in <= 4'b0110;								@posedge clk;
															@posedge clk;
															@posedge clk;
			in <= 4'b0000;								@posedge clk;
															@posedge clk;
															@posedge clk;
		$stop;
	end
endmodule